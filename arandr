#!/usr/bin/env python

# ARandR -- Another XRandR GUI
# Copyright (C) 2008 -- 2011 chrysn <chrysn@fsfe.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""Run ARandR GUI"""

import sys
import os
import signal
import atexit
import gettext

# monkey patch gettext for local execution

if sys.argv[0].startswith('./'):
    old_find = gettext.find

    def find_wrapper(domain, localedir=None, languages=None, all=False):
        """Catch finds for arandr and redirect them to local files"""
        if domain == 'arandr':
            result = old_find(domain, './build/locale', languages, all)
            if result:
                return result
        return old_find(domain, localedir, languages, all)

    gettext.find = find_wrapper

PID_FILE_PATH = '/tmp/amrandr.pid'
def remove_pid_file():
    try:
        os.remove(PID_FILE_PATH)
    except OSError:
        pass

pid_file = None
try:
    # using os.open to get access to atomic file creation
    pid_file = os.open(PID_FILE_PATH, os.O_CREAT | os.O_EXCL | os.O_WRONLY)
    pid = str(os.getpid())
    bytes_written = os.write(pid_file, pid)
    if bytes_written != len(pid):
        sys.stderr.write("Warning: could not write to pid file\n")
except OSError:
    # Failed to create the file. Might be that it already exists
    try:
        running_amrandr_pid = open(PID_FILE_PATH, 'r').read()
        running_amrandr_pid = int(running_amrandr_pid)
        os.kill(running_amrandr_pid, signal.SIGUSR1)
        sys.exit(0)
    except (IOError, OSError, ValueError):
        # pid file doesn't exist / can't read from the file / pid is stale
        remove_pid_file() # clean out the bad pid file

if pid_file is not None:
    os.close(pid_file)

atexit.register(remove_pid_file)

# defer importing and thus loading locales until monkey patching is done

from screenlayout.gui import main
main()
